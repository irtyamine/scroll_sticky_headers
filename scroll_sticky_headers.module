<?php

/*
 * Implements hook_theme()
 */ 

function scroll_sticky_headers_theme() {
    $theme = array(
      'scrollstickytable' => array (
        'variables' => array(
          'header' => null,
          'rows' => null,
          'attributes' => array(),
          'caption' => null,
          'colgroups' => null,
          'empty' => null,
          'scroll sticky' => null,
          'container attributes' => array(),
          ),
        ),
    );
    
    return $theme;    
}
/*
 * A theme function that implements a table with a sticky header that can scroll horizontally.
 *
 * The JavaScript file scroll-tableheader.js was adapted from https://www.drupal.org/node/1307128
 * The code for this function is largely based on theme_table() provided by Drupal
 * This function adds a div wrapper around the header table, which is then manipulated in the JS file
 * In order to define scroll-able sticky headers, be sure to pass
 * $variable['scroll sticky'] => TRUE;
 *
 * $variable['container attribute'] should contain the width of the table containder.
 * A css <code>overflow: scroll</code> is automatically added to the wrapper div
 *
 * $variable['attribute'] should pass the width of the table. In order for it to be horizontally scrollable,
 * it needs to be larger than the width of the wrapper div
 * 
 */

function theme_scrollstickytable($variables) {
  $header = $variables['header'];
  $rows = $variables['rows'];
  $attributes = $variables['attributes'];
  $caption = $variables['caption'];
  $colgroups = $variables['colgroups'];
  $scrollsticky = $variables['scroll sticky'];
  $empty = $variables['empty'];
  $container_attributes = $variables['container attributes'];
  
  // Add sticky headers, if applicable.
  if (count($header) && $scrollsticky) {
    drupal_add_js(drupal_get_path('module', 'scroll_sticky_headers') . '/scroll-tableheader.js');
    // Add 'sticky-enabled' class to the table to identify it for JS.
    // This is needed to target tables constructed by this function.
    $attributes['class'][] = 'sticky-enabled';
    $container_attributes['class'][] = 'scroll-sticky-enabled';
    $container_attributes['style'][] = 'overflow: scroll';
  }
  
  $output = '';
  
  // Add the wrapper
  $output .= '<div ' . drupal_attributes($container_attributes) . ">\n";
  
  $output .= '<table' . drupal_attributes($attributes) . ">\n";

  if (isset($caption)) {
    $output .= '<caption>' . $caption . "</caption>\n";
  }

  // Format the table columns:
  if (count($colgroups)) {
    foreach ($colgroups as $number => $colgroup) {
      $attributes = array();

      // Check if we're dealing with a simple or complex column
      if (isset($colgroup['data'])) {
        foreach ($colgroup as $key => $value) {
          if ($key == 'data') {
            $cols = $value;
          }
          else {
            $attributes[$key] = $value;
          }
        }
      }
      else {
        $cols = $colgroup;
      }

      // Build colgroup
      if (is_array($cols) && count($cols)) {
        $output .= ' <colgroup' . drupal_attributes($attributes) . '>';
        $i = 0;
        foreach ($cols as $col) {
          $output .= ' <col' . drupal_attributes($col) . ' />';
        }
        $output .= " </colgroup>\n";
      }
      else {
        $output .= ' <colgroup' . drupal_attributes($attributes) . " />\n";
      }
    }
  }

  // Add the 'empty' row message if available.
  if (!count($rows) && $empty) {
    $header_count = 0;
    foreach ($header as $header_cell) {
      if (is_array($header_cell)) {
        $header_count += isset($header_cell['colspan']) ? $header_cell['colspan'] : 1;
      }
      else {
        $header_count++;
      }
    }
    $rows[] = array(array('data' => $empty, 'colspan' => $header_count, 'class' => array('empty', 'message')));
  }

  // Format the table header:
  if (count($header)) {
    $ts = tablesort_init($header);
    // HTML requires that the thead tag has tr tags in it followed by tbody
    // tags. Using ternary operator to check and see if we have any rows.
    $output .= (count($rows) ? ' <thead><tr>' : ' <tr>');
    foreach ($header as $cell) {
      $cell = tablesort_header($cell, $header, $ts);
      $output .= _theme_table_cell($cell, TRUE);
    }
    // Using ternary operator to close the tags based on whether or not there are rows
    $output .= (count($rows) ? " </tr></thead>\n" : "</tr>\n");
  }
  else {
    $ts = array();
  }

  // Format the table rows:
  if (count($rows)) {
    $output .= "<tbody>\n";
    $flip = array('even' => 'odd', 'odd' => 'even');
    $class = 'even';
    foreach ($rows as $number => $row) {
      // Check if we're dealing with a simple or complex row
      if (isset($row['data'])) {
        $cells = $row['data'];
        $no_striping = isset($row['no_striping']) ? $row['no_striping'] : FALSE;

        // Set the attributes array and exclude 'data' and 'no_striping'.
        $attributes = $row;
        unset($attributes['data']);
        unset($attributes['no_striping']);
      }
      else {
        $cells = $row;
        $attributes = array();
        $no_striping = FALSE;
      }
      if (count($cells)) {
        // Add odd/even class
        if (!$no_striping) {
          $class = $flip[$class];
          $attributes['class'][] = $class;
        }

        // Build row
        $output .= ' <tr' . drupal_attributes($attributes) . '>';
        $i = 0;
        foreach ($cells as $cell) {
          $cell = tablesort_cell($cell, $header, $ts, $i++);
          $output .= _theme_table_cell($cell);
        }
        $output .= " </tr>\n";
      }
    }
    $output .= "</tbody>\n";
  }

  $output .= "</table>\n";
  $output .= "</div>\n";
  
  return $output;

} 